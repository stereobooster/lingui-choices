{"version":3,"sources":["components/Radio.js","components/Checkbox.js","App.js","serviceWorker.js","index.js"],"names":["checked","name","value","state","current","onChange","setState","Object","defineProperty","Radio","_ref","children","disabled","react_default","a","createElement","className","undefined","type","displayName","Checkbox","isReact","isSourceLocale","isDefault","isSynthetic","isSyntheticAndDefault","isCatalogs","disabledHtml","App","keyScheme","format","translations","locale","bundler","babel","html","translationStore","this","stateProvider","bind","assign","isInUrl","disabledPrerendering","href","Fragment","isGettext","isLingui","isSeparateBundles","isPrerendering","isWebpack","isOtherBundler","isVcsAndThirdPartyService","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.036c9ae8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst current = (name, state) => state[name] || [];\n\nconst checked = (name, value, state) => current(name, state) === value;\n\nconst onChange = (name, value, setState) => () => setState({ [name]: value });\n\nexport default function Radio({\n  name,\n  value,\n  children,\n  state,\n  setState,\n  disabled\n}) {\n  return (\n    <label className={disabled ? \"disabled\" : undefined}>\n      <input\n        type=\"radio\"\n        name={name}\n        value={value}\n        checked={checked(name, value, state)}\n        onChange={onChange(name, value, setState)}\n        disabled={disabled}\n      />{\" \"}\n      {children}\n    </label>\n  );\n}\n\nRadio.displayName = \"Radio\";\n","import React from \"react\";\n\nconst current = (name, state) => state[name];\n\nconst checked = (name, state) => current(name, state) === true;\n\nconst onChange = (name, state, setState) => () =>\n  setState({ [name]: !state[name] });\n\n// boolean checkbox\nexport default function Checkbox({\n  name,\n  children,\n  state,\n  setState,\n  disabled\n}) {\n  return (\n    <label className={disabled ? \"disabled\" : undefined}>\n      <input\n        type=\"checkbox\"\n        name={name}\n        checked={checked(name, state)}\n        onChange={onChange(name, state, setState)}\n        disabled={disabled}\n      />{\" \"}\n      {children}\n    </label>\n  );\n}\n\nCheckbox.displayName = \"Checkbox\";\n\n// Array checkbox\n// const checked = (name, value, state) =>\n//   current(name, state).indexOf(value) > -1;\n\n// const onChange = (name, value, state, setState) => () =>\n//   checked(name, value, state)\n//     ? setState({ [name]: current(name, state).filter(x => x !== value) })\n//     : setState({ [name]: [...current(name, state), value] });\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Radio from \"./components/Radio\";\nimport Checkbox from \"./components/Checkbox\";\n\nconst isReact = state => state[\"react\"];\nconst isInUrl = state => state[\"locale\"] === \"inUrl\";\nconst isPrerendering = state =>\n  state[\"html\"] !== \"no\" && state[\"html\"] !== undefined;\nconst isGettext = state => state[\"format\"] === \"gettext\";\nconst isLingui = state => state[\"format\"] === \"lingui\";\nconst isSourceLocale = state => !!state[\"sourceLocale\"];\nconst isDefault = state => state[\"keyScheme\"] === \"default\";\nconst isSynthetic = state => state[\"keyScheme\"] === \"synthetic\";\nconst isSyntheticAndDefault = state =>\n  state[\"keyScheme\"] === \"syntheticAndDefault\";\n\nconst isCatalogs = state => state[\"translations\"] === \"catalogs\";\nconst isSeparateBundles = state => state[\"translations\"] === \"separateBundles\";\n\nconst isWebpack = state => state[\"bundler\"] === \"webpack\";\nconst isOtherBundler = state => state[\"bundler\"] === \"other\";\n\nconst isVcsAndThirdPartyService = state =>\n  state[\"translationStore\"] === \"vcsAndThirdPartyService\";\n\nconst disabledHtml = state => !isReact(state);\nconst disabledPrerendering = state => !isReact(state) || !isInUrl(state);\n\nclass App extends Component {\n  state = {\n    keyScheme: \"default\",\n    format: \"gettext\",\n    translations: \"catalogs\",\n    locale: \"inUrl\",\n    bundler: \"webpack\",\n    babel: \"macros\",\n    html: \"no\",\n    translationStore: \"vcsAndThirdPartyService\"\n  };\n  render() {\n    const { state } = this;\n    const stateProvider = { state, setState: this.setState.bind(this) };\n    return (\n      <div className=\"content\">\n        <form className=\"column\">\n          <h3>Choices</h3>\n\n          <div className=\"field\">\n            <h4>Key scheme</h4>\n            <Radio name=\"keyScheme\" value=\"default\" {...stateProvider}>\n              Default (recommended)\n            </Radio>\n            <Radio name=\"keyScheme\" value=\"synthetic\" {...stateProvider}>\n              Synthetic\n            </Radio>\n            <Radio\n              name=\"keyScheme\"\n              value=\"syntheticAndDefault\"\n              {...stateProvider}\n            >\n              Synthetic + Default\n            </Radio>\n          </div>\n\n          <div className=\"field\">\n            <h4>\n              What <code>format</code> do you use?\n            </h4>\n            <Radio name=\"format\" value=\"gettext\" {...stateProvider}>\n              <code>po</code> (recommended)\n            </Radio>\n            <Radio name=\"format\" value=\"lingui\" {...stateProvider}>\n              <code>lingui</code>\n            </Radio>\n          </div>\n\n          <div className=\"field\">\n            <h4>\n              Do you use <code>sourceLocale</code>?\n            </h4>\n            <Checkbox name=\"sourceLocale\" {...stateProvider}>\n              Yes\n            </Checkbox>\n          </div>\n\n          <div className=\"field\">\n            <h4>Where do you store locale?</h4>\n            <Radio name=\"locale\" value=\"inUrl\" {...stateProvider}>\n              in URL e.g. <code>example.com/en/foo</code> or{\" \"}\n              <code>example.com/cs/foo</code>\n            </Radio>\n            <Radio name=\"locale\" value=\"notInUrl\" {...stateProvider}>\n              not in URL, for example in <code>cookies</code> or{\" \"}\n              <code>localStorage</code> or server session or server database\n            </Radio>\n          </div>\n\n          <div className=\"field\">\n            <h4>How do you compile translations?</h4>\n            <Radio name=\"translations\" value=\"catalogs\" {...stateProvider}>\n              Catalog for each languge e.g. <code>main.js</code> and one of{\" \"}\n              <code>i18n.en.js</code>, <code>i18n.cs.js</code>\n            </Radio>\n            <Radio\n              name=\"translations\"\n              value=\"separateBundles\"\n              {...stateProvider}\n            >\n              Separate JS bundle for each language e.g. <code>main.en.js</code>{\" \"}\n              or <code>main.cs.js</code>\n            </Radio>\n          </div>\n\n          <div className=\"field\">\n            <h4>What JS library do you use?</h4>\n            <Checkbox name=\"react\" {...stateProvider}>\n              React\n            </Checkbox>\n            <Checkbox name=\"plainJs\" {...stateProvider}>\n              Plain JS\n            </Checkbox>\n          </div>\n\n          <div className=\"field\">\n            <h4 className={disabledHtml(state) ? \"disabled\" : undefined}>\n              Do you have prerendered HTML?\n            </h4>\n            <Radio\n              name=\"html\"\n              value=\"ssr\"\n              {...stateProvider}\n              disabled={disabledHtml(state)}\n            >\n              Yes, Server Side Rendering\n            </Radio>\n            <Radio\n              name=\"html\"\n              value=\"prerendering\"\n              {...stateProvider}\n              disabled={disabledPrerendering(state)}\n            >\n              Yes, prerendering, for example react-snap, react-static or Gatsby\n            </Radio>\n            <Radio\n              name=\"html\"\n              value=\"no\"\n              {...stateProvider}\n              disabled={disabledHtml(state)}\n            >\n              No\n            </Radio>\n          </div>\n\n          <div className=\"field\">\n            <h4>What bundler do you use?</h4>\n            <Radio name=\"bundler\" value=\"webpack\" {...stateProvider}>\n              Webpack\n            </Radio>\n            <Radio name=\"bundler\" value=\"other\" {...stateProvider}>\n              Other\n            </Radio>\n          </div>\n\n          <div className=\"field\">\n            <h4>How did you configure Babel?</h4>\n            <Radio name=\"babel\" value=\"macros\" {...stateProvider}>\n              macros (recommended)\n            </Radio>\n            <Radio name=\"babel\" value=\"transform\" {...stateProvider}>\n              babel-transform plugin\n            </Radio>\n          </div>\n\n          <div className=\"field\">\n            <h4>Where do you store translations?</h4>\n            <Radio name=\"translationStore\" value=\"vcs\" {...stateProvider}>\n              VCS (version control system) along with application code, like git\n              or mercurial etc\n            </Radio>\n            <Radio\n              name=\"translationStore\"\n              value=\"thirdPartyService\"\n              {...stateProvider}\n            >\n              third party service, like Phraseapp, Crowdin, Transifex etc\n            </Radio>\n            <Radio\n              name=\"translationStore\"\n              value=\"vcsAndThirdPartyService\"\n              {...stateProvider}\n            >\n              VCS and third party service\n            </Radio>\n          </div>\n        </form>\n\n        <div className=\"column\">\n          <p>\n            Source code is{\" \"}\n            <a href=\"https://github.com/stereobooster/lingui-choices\">here</a>\n          </p>\n\n          {isDefault(state) && (\n            <React.Fragment>\n              <p>\n                When you use some default text (from mockups) as keys. For\n                example:\n                <pre>\n                  {`<Trans>Credit card number</Trans>\ni18n._(t\\`The number in the front of your card\\`)\n<Plural\n  value={this.state.duration}\n  one=\"1 hour\"\n  other=\"# hours\"\n/>\ni18n._(plural({\n  value: value,\n  one: \"1 hour\",\n  other: \"# hours\"\n}))`}\n                </pre>\n              </p>\n              <p>\n                <b>Pros</b>: you don't need naming rules, very easy to name\n                things. Defaults always present.\n              </p>\n              <p>\n                <b>Cons</b>: some text can be confusing without context, like{\" \"}\n                <code>XXXX XXXX XXXX XXXX XXXX</code> in given example, but\n                there are comments generated by Lingui, which can be used as\n                context, also it is possible to use in context editor and\n                something like storybook, styleguidist, cosmos to solve this.\n              </p>\n            </React.Fragment>\n          )}\n\n          {isSynthetic(state) && (\n            <React.Fragment>\n              <p>\n                When you use some synthetic strings for keys. For example:\n                <pre>\n                  {`<Trans id=\"name_of_view.form.name_of_field\" />\ni18n._(t(\"name_of_view.form.name_of_field.hint\")\\`\\`)\n<Plural\n  id=\"name_of_view.duration.value\"\n  value={this.state.duration}\n/>\n// I didn't find a way to put id in plural macro`}\n                </pre>\n              </p>\n              <p>\n                <b>Pros</b>: you can prevent collisions, you can add some\n                semantics in the name and this way help translators\n              </p>\n              <p>\n                <b>Cons</b>: you need manually support consistency of keys, you\n                need to check if you already have a key for given string or you\n                need to create one, you need naming rules, you need to come up\n                with keys, you can argue about naming on code reviews (because\n                that what developers do). You need to make sure you provide\n                defaults otherwise untranslated keys can go to production\n              </p>\n            </React.Fragment>\n          )}\n\n          {isSyntheticAndDefault(state) && (\n            <React.Fragment>\n              <p>\n                Combination of Synthetic and Default. For example:\n                <pre>\n                  {`<Trans id=\"name_of_view.form.name_of_field\">Credit card number</Trans>\ni18n._(t(\"name_of_view.form.name_of_field.hint\")\\`The number in the front of your card\\`)\n<Plural\n  id=\"name_of_view.duration.value\"\n  value={this.state.duration}\n  one=\"1 hour\"\n  other=\"# hours\"\n/>\n// I didn't find a way to put id in plural macro`}\n                </pre>\n              </p>\n              <p>\n                <b>Pros</b>: Defaults always present.\n              </p>\n              <p>\n                <b>Cons</b>: same as synthetic keys and you will have repeating\n                defaults.\n              </p>\n            </React.Fragment>\n          )}\n\n          <h3>Recommendations</h3>\n\n          {isGettext(state) && isSourceLocale(state) && isDefault(state) && (\n            <p>\n              You may need <code>#, fuzzy</code> flag. See{\" \"}\n              <a href=\"https://github.com/lingui/js-lingui/issues/383#issuecomment-435217183\">\n                #383\n              </a>\n            </p>\n          )}\n          {isSourceLocale(state) && isSynthetic(state) && (\n            <p>\n              You need to make sure you don't deliver synthetic keys to users.\n              See{\" \"}\n              <a href=\"https://github.com/lingui/js-lingui/issues/405\">#405</a>\n            </p>\n          )}\n          {!isLingui(state) &&\n            !isSourceLocale(state) &&\n            isSyntheticAndDefault(state) && (\n              <p>\n                You may want to use <code>sourceLocale</code> otherwise default\n                values won't get extracted.\n              </p>\n            )}\n          {isCatalogs(state) && (\n            <p>\n              You may need to figure out how to do code splitting for catalogs.{\" \"}\n              <a href=\"https://github.com/lingui/js-lingui/issues/139\">#139</a>{\" \"}\n              can improve situation.\n            </p>\n          )}\n          {isSeparateBundles(state) && (\n            <p>\n              Good news! Problem with code spliting is solved if your bundler\n              supports code splitting for JS, like Webpack.\n            </p>\n          )}\n          {isPrerendering(state) && (\n            <p>\n              <a href=\"https://dev.to/stereobooster/friday-hack-suspense-concurrent-mode-and-lazy-to-load-locales-for-i18n-hgg\">\n                You need some workaround to prevent white flash\n              </a>\n            </p>\n          )}\n          {isCatalogs(state) && isWebpack(state) && (\n            <React.Fragment>\n              <p>\n                Good news! Problem with cache invalidation is solved. Use\n                something like this to load catalogs{\" \"}\n                <code>\n                  {\n                    'import(/* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */ `./locales/${locale}/messages.js`);'\n                  }\n                </code>\n              </p>\n              <p>\n                Add <code>lingui compile</code> as part of <code>start</code>,{\" \"}\n                <code>build</code> and <code>test</code> commands\n              </p>\n            </React.Fragment>\n          )}\n          {isCatalogs(state) && isOtherBundler(state) && (\n            <p>You need to figure out how to invalidate cache for catalogs</p>\n          )}\n\n          <h3>Workflow</h3>\n          {isDefault(state) && isVcsAndThirdPartyService(state) && (\n            <ol>\n              <li>developer recieves UI specification</li>\n              <li>\n                developer creates component\n                <ol>\n                  <li>developer creates keys based on UI</li>\n                  <li>developer runs script to extract keys</li>\n                </ol>\n              </li>\n              <li>\n                developer commits changes and pushes PR to\n                review/testing/deployment\n                <ol>\n                  <li>\n                    CI runs script to check that developer didn't forget to\n                    extract keys\n                  </li>\n                  <li>\n                    CI runs script to upload new keys to Third Party Service\n                  </li>\n                </ol>\n              </li>\n              <li>\n                Eventually, when translations are ready, developer runs script\n                to download translations and redeploys application with new\n                translations\n              </li>\n            </ol>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}